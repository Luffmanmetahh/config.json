        throw new Error('duplicate ID being inserted: ' + valueID)
    }

    if (this.array.length > 0) {
      const index = this.firstIndex (value)
      
      if (index >= this.array.length) this.array.push (value)
      else if (index < 0) this.array.unshift (value)
      else if (this.key.key(value) !== this.key.key(this.array[index])) this.array.splice (index, 0, value)
      else throw new Error(`duplicate key: ${this.key.key(value)}, of inserting: ${valueID}, present: ${this.idGetter(this.array[index])}`)
    
    } else {
      this.array.push (value)
    }  
    this.dict[valueID] = value
  }
  private filtered (start: number, count: number, mode: PaginationMode, predicate?: (value: T, index: number) => boolean) {
    let arr: T[]
    if (mode === 'after') {
      if (predicate) {
        arr = []
        for (let item of this.array.slice (start)) {
          predicate (item, start+arr.length) && arr.push (item)
          if (arr.length >= count) break
        }
      } else arr = this.array.slice (start, start+count)
    } else if (mode === 'before') {
      if (predicate) {
        arr = []
        for (let i = start-1; i >= 0; i--) {
          let item = this.array[i]
          predicate (item, start+arr.length) && arr.unshift (item)
          if (arr.length >= count) break
        }
      } else arr = this.array.slice ( Math.max(start-count, 0), start)
    }
    return arr
  }
  private firstIndex (value: T) {
    const valueKey = this.key.key(value)
    return binarySearch (this.array, v => this.key.compare(valueKey, this.key.key(v)))
  }

  *[Symbol.iterator](): Iterator<T> {
    for (let item of this.array) yield item
  }
}
